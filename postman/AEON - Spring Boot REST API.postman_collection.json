{
	"info": {
		"_postman_id": "6742e9b4-5ddf-4917-a0ab-bd25cb3ae6f5",
		"name": "AEON - Spring Boot REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12454975"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "valid registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('registration success');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.token).to.be.a('string');",
											"});",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"if(jsonData.status==\"success\"){",
											"    postman.setEnvironmentVariable(\"token\", jsonData.payload.token);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"restu indera\",\n    \"username\": \"rstx\",\n    \"password\": \"9927\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "username - existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username is exist');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"dwihandoko\",\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "username - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"dwihandoko\",\n    \"username\": \"\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "username - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"dwihandoko\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "username - more than 10 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username max 10 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"dwihandoko\",\n    \"username\": \"iuawsbrfguioabrwgjlhabwrtgouybarg\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "name - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('name is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "name - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('name is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "name - more than 100 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('name max 100 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"iuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawr\",\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "name - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('name must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"restu indera 32\",\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "password - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('password is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"restu indera\",\n    \"username\": \"rstx\",\n    \"password\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "password - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('password is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"restu indera\",\n    \"username\": \"rstx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "password - more than 100 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('password max 100 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"restu indera\",\n    \"username\": \"rstx\",\n    \"password\": \"iuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawriuawsbrfguioabrwgjlhabwrtgouybargjahbrgvahbwrgihbawr\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "valid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('login success');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.token).to.be.a('string');",
											"});",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"token\", jsonData.payload.token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"rstx\",\n    \"password\": \"9927\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"rstxx\",\n    \"password\": \"9927\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "username - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"dwihandoko\",\n    \"username\": \"\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "username - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('username is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"dwihandoko\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "name - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('name is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "name - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('name is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"rstx\",\n    \"password\": \"7299\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Hello World",
					"item": [
						{
							"name": "get hello world without token",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/hello-world",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"hello-world"
									]
								}
							},
							"response": []
						},
						{
							"name": "get hello world with token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/hello-world",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"hello-world"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "logout",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/auth/logout",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Karyawan",
			"item": [
				{
					"name": "Add Valid Karyawan",
					"item": [
						{
							"name": "karyawan 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"status\": \"belum menikah\",\n    \"jk\": \"laki-laki\",\n    \"dob\": \"2000-04-03\",\n    \"alamat\": \"pemalang\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"sania nastasya viora\",\n    \"status\": \"belum menikah\",\n    \"jk\": \"perempuan\",\n    \"dob\": \"2000-08-28\",\n    \"alamat\": \"pemalang\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327050507000004\",\n        \"npwp\": \"9876543219876543\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tenesia amalia putri\",\n    \"status\": \"menikah\",\n    \"jk\": \"perempuan\",\n    \"dob\": \"2001-04-03\",\n    \"alamat\": \"cepu\",\n    \"detailKaryawan\": {\n        \"nik\": \"1659748563215463\",\n        \"npwp\": \"1234567891232567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"irfan dani\",\n    \"status\": \"menikah\",\n    \"jk\": \"laki-laki\",\n    \"dob\": \"1999-02-11\",\n    \"alamat\": \"semarang\",\n    \"detailKaryawan\": {\n        \"nik\": \"3317030304000003\",\n        \"npwp\": \"1234564891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"amrin amanu\",\n    \"status\": \"belum menikah\",\n    \"jk\": \"laki-laki\",\n    \"dob\": \"1999-12-12\",\n    \"alamat\": \"semarang\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304310003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Invalid Karyawan",
					"item": [
						{
							"name": "nama - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera 32\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - more than 100 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama max 100 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"airhybgoiafbngiobawrglijhabnfoigyubawrilhjgvbnaiorubgaljknwfbgioahtbglkjafsbnviuabrwglkjznsfgiuhnsfkjgnaiukwrjntklzjhfgvuigavebrkljstbnoiuyhawtfwiu\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis kelamin - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis kelamin is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis kelamin - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis kelamin is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis kelamin - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis kelamin must be \\'laki-laki\\' or \\'perempuan\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"pria\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "status - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('status is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "status - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('status is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "status - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('status must be \\'menikah\\' or \\'belum menikah\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"tidak menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "alamat - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('alamat is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "alamat - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('alamat is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "alamat - more than 200 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('alamat max 200 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"kakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrg\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "date of birth - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date of birth is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "date of birth - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date of birth is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "date of birth - invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date format must be \\'yyyy-MM-dd\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"03-04-2000\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - characters not 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp length must be 16');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"123456789123456\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp must be number');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"3327030304000003\",\n        \"npwp\": \"abcdefghijklmnop\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik- characters not 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik length must be 16');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"332703030400000\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik must be number');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\",\n    \"detailKaryawan\": {\n        \"nik\": \"abcdefghijklmnop\",\n        \"npwp\": \"1234567891234567\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "detail karyawan - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('detailKaryawan is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera\",\n    \"jk\": \"laki-laki\",\n    \"status\": \"belum menikah\",\n    \"alamat\": \"pemalang\",\n    \"dob\": \"2000-04-03\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Single Karyawan",
					"item": [
						{
							"name": "GET Karyawan By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"a"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Detail Karyawan By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get detail karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/detail",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "detail karyawan - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/11/detail",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"11",
										"detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "detail karyawan - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/a/detail",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"a",
										"detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Valid Karyawan",
					"item": [
						{
							"name": "nama",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"restu indera dwihandoko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis kelamin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jk\": \"perempuan\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"status\": \"menikah\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "date of birth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"dob\": \"1999-04-03\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "alamat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"alamat\": \"semarang\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"nik\": \"1111111111111111\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"npwp\": \"2222222222222222\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Invalid Karyawan",
					"item": [
						{
							"name": "id - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"nama\": \"restu indera dwihandoko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"restu indera dwihandoko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan is not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 11,\n    \"nama\": \"restu indera dwihandoko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan id invalid');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"a\",\n    \"nama\": \"restu indera dwihandoko\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama max 100 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"airhybgoiafbngiobawrglijhabnfoigyubawrilhjgvbnaiorubgaljknwfbgioahtbglkjafsbnviuabrwglkjznsfgiuhnsfkjgnaiukwrjntklzjhfgvuigavebrkljstbnoiuyhawtfwiu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - more than 100 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"restu indera 32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis kelamin - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis kelamin cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jk\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis kelamin - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis kelamin must be \\'laki-laki\\' or \\'perempuan\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jk\": \"pria\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "status - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('status cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"status\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "status - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('status must be \\'menikah\\' or \\'belum menikah\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"status\": \"tidak menikah\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "alamat - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('alamat cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"alamat\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "alamat - more than 200 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('alamat max 200 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"alamat\": \"kakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrgkakjhrbfgioqwbrgjklhafbgiouyabtrljghbawirgjnapituhgakjngisurbguhhaiwrg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "date of birth - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date of birth cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"dob\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "date of birth - invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date format must be \\'yyyy-MM-dd\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"dob\": \"2000/04/03\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"nik\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik - characters not 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik length must be 16');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"nik\": \"123\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "nik - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nik must be number');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"nik\": \"abcdefghijklmnop\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"npwp\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - characters not 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp length must be 16');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"npwp\": \"123\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "npwp - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('npwp must be number');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"detailKaryawan\": {\n        \"npwp\": \"abcdefghijklmnop\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Karyawan",
					"item": [
						{
							"name": "search by nama 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by nama 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"ia\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by nama 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"ia\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"desc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "keyword - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('keyword is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"\",\n    \"size\": 1,\n    \"page\": 1,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"page\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort must be \\'asc\\' or \\'desc\\'');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"ascending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": \"\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": \"a\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"page\": \"\",\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 1,\n    \"page\": \"a\",\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete karyawan",
					"item": [
						{
							"name": "delete karyawan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success delete karyawan');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"a"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Training",
			"item": [
				{
					"name": "Add Valid Training",
					"item": [
						{
							"name": "Add Training 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"metrodata\",\n    \"tema\": \"fullstack developer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Training 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"metrodata\",\n    \"tema\": \"bussiness anyalist & quality assurance\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Training 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"aws\",\n    \"tema\": \"machine learning\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Training 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"HelloMotion\",\n    \"tema\": \"Motion Graphic Artist\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Training 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"HelloMotion\",\n    \"tema\": \"Graphic Design and Digital Imaging\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Invalid Training",
					"item": [
						{
							"name": "nama pengajar - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"\",\n    \"tema\": \"contoh tema\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama pengajar - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tema\": \"contoh tema\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama pengajar - more than 100 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar max 100 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"jniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrgjniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrg\",\n    \"tema\": \"contoh tema\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama pengajar - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"agus 123\",\n    \"tema\": \"contoh tema\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "tema - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tema is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"agus\",\n    \"tema\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "tema - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tema is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"agus\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "tema - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tema max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"agus\",\n    \"tema\": \"jniparwjnbgilajfngukjasfndansklfgjnurughiagjdfnnwjfnaiwrugkawjnrgjwrngrgkwjrg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Single Training",
					"item": [
						{
							"name": "GET Training By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/training/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/training/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/training/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Training",
					"item": [
						{
							"name": "search by tema 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by tema 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"ing\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by tema 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"ing\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"desc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "keyword - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('keyword is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"\",\n    \"size\": 1,\n    \"page\": 1,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort must be \\'asc\\' or \\'desc\\'');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"ascending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": \"\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": \"a\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": \"\",\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": \"a\",\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Valid Training",
					"item": [
						{
							"name": "nama pengajar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama_pengajar\": \"budi\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "tema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"tema\": \"cyber security\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Invalid Training",
					"item": [
						{
							"name": "id - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"nama_pengajar\": \"santoso\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama_pengajar\": \"santoso\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training is not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 11,\n    \"nama_pengajar\": \"santoso\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training id invalid');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"a\",\n    \"nama_pengajar\": \"santoso\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama pengajar - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama_pengajar\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama pengajar - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama_pengajar\": \"budi 32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama pengajar - more than 100 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama pengajar max 100 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama_pengajar\": \"akwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "tema - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tema cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"tema\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						},
						{
							"name": "tema - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tema max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"tema\": \"akwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training",
									"host": [
										"{{url}}"
									],
									"path": [
										"training"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Training",
					"item": [
						{
							"name": "delete training 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success delete training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/training/5",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/training/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"a"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Karyawan-Training",
			"item": [
				{
					"name": "Add Valid Karyawan Training",
					"item": [
						{
							"name": "karyawan training 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": 2,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 2,\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 3,\n    \"trainingId\": 4,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 2,\n    \"trainingId\": 2,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Invalid Karyawan Training",
					"item": [
						{
							"name": "karyawan - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan ID is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": \"\",\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan ID is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan with ID 11 is not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 11,\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan id is invalid');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": \"a\",\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training ID is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": \"\",\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training ID is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training with ID 11 is not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": 11,\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training id is invalid');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": \"a\",\n    \"tanggal_training\": \"2022-01-01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "tanggal training - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tanggal training is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": 1,\n    \"tanggal_training\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "tanggal training - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tanggal training is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "tanggal training - invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date format must be \\'yyyy-MM-dd\\'');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"karyawanId\": 1,\n    \"trainingId\": 1,\n    \"tanggal_training\": \"2022/01/01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Single Karyawan Training",
					"item": [
						{
							"name": "GET Karyawan Training By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/training-karyawan/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan training not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/training-karyawan/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/training-karyawan/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Valid Karyawan Training",
					"item": [
						{
							"name": "karyawan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"karyawanId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"trainingId\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "tanggal training",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"tanggal_training\": \"2019-09-19\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Invalid Karyawan Training",
					"item": [
						{
							"name": "id - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan training id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"tanggal_training\": \"2020-02-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan training id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tanggal_training\": \"2020-02-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan training is not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 11,\n    \"tanggal_training\": \"2020-02-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan training id invalid');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"a\",\n    \"tanggal_training\": \"2020-02-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan ID cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"karyawanId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan with ID 11 is not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"karyawanId\": 11\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan id is invalid');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"karyawanId\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training ID cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"trainingId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training with ID 11 is not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n        \"trainingId\": 11\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "training - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('training id is invalid');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"trainingId\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "tanggal training - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('tanggal training cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"tanggal_training\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						},
						{
							"name": "tanggal training - invalid format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('date format must be \\'yyyy-MM-dd\\'');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"tanggal_training\": \"2023/01/02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Karyawan Training",
					"item": [
						{
							"name": "search by tema 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"learning\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by tema 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"assurance\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by tema 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"artist\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"desc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by nama 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"restu\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by nama 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"ia\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "search by nama 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"    pm.expect(responseJson.payload.content).length(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"ia\",\n    \"size\": 2,\n    \"page\": 0,\n    \"sort\": \"desc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training-karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "keyword - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('keyword is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"\",\n    \"size\": 1,\n    \"page\": 1,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort - invalid enumerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('sort must be \\'asc\\' or \\'desc\\'');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": 0,\n    \"sort\": \"ascending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": \"\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "size - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('size must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": \"a\",\n    \"page\": 0,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": \"\",\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page is required');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "page - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('page must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyword\": \"developer\",\n    \"size\": 1,\n    \"page\": \"a\",\n    \"sort\": \"asc\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/training/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"training",
										"list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Karyawan Training",
					"item": [
						{
							"name": "delete karyawan training 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success delete karyawan training');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/training-karyawan/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan training not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/training-karyawan/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan training - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/training-karyawan/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"training-karyawan",
										"a"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Rekening",
			"item": [
				{
					"name": "Add Valid Rekening",
					"item": [
						{
							"name": "rekening 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"rekening satu\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "rekening 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"rekening dua\",\n    \"jenis\": \"tabungan B\",\n    \"nomor\": \"123456788\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "rekening 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success add new rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"rekening tiga\",\n    \"jenis\": \"tabungan B\",\n    \"nomor\": \"123456799\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Invalid Rekening",
					"item": [
						{
							"name": "nama - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"rekening 1\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"ajrngioabnrtgkjabtigubnatkjgnsituehgklzjsfngiawurhybvjhabwruefyagwritugnksjtnipauthgkljasfgioaudfiouabwrgkljbaiugthalkjrtngiauwrhgiupahwrkjg\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"tabungan 1\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"ajrngioabnrtgkjabtigubnatkjgnsituehgklzjsfngiawurhybvjhabwruefyagwritugnksjtnipauthgkljasfgioaudfiouabwrgkljbaiugthalkjrtngiauwrhgiupahwrkjg\",\n    \"nomor\": \"123456789\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"tabungan A\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor must be number only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"tabungan satu\",\n    \"jenis\": \"tabungan A\",\n    \"nomor\": \"123456789857435418741354187453415123456789857435418741354187453415123456789857435418741354187453415123456789857435418741354187453415\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Rekening",
					"item": [
						{
							"name": "GET Rekening By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Rekening",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success get all rekening');",
											"    pm.expect(responseJson.payload).length(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "rekening - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('rekening not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "karyawan - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('karyawan not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/11/rekening/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"11",
										"rekening",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "rekening - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id rekening must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening",
										"a"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Valid Rekening",
					"item": [
						{
							"name": "nama",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"rekening x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jenis\": \"rekening x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success update rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nomor\": \"111111111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Invalid Training",
					"item": [
						{
							"name": "id - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('rekening id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"\",\n    \"nama\": \"xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('rekening id is required');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nama\": \"xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('rekening is not found');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 11,\n    \"nama\": \"xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "id - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('rekening id invalid');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"a\",\n    \"nama\": \"xxx\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"budi 32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nama - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nama max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nama\": \"akwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jenis\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - non alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis must be alphabet only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jenis\": \"budi 32\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "jenis - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('jenis max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"jenis\": \"akwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbgaakwrhbgviawbgkajbwgiahwbrgjakhwbrguiaywrbga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor cannot be empty');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nomor\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor must be number only');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nomor\": \"32a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						},
						{
							"name": "nomor - more than 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('nomor max 50 characters');",
											"    pm.expect(responseJson.payload).to.equal(null);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"nomor\": \"651264521465126452146512645214651264521465126452146512645214651264521465126452146512645214651264521465126452146512645214651264521465126452146512645214651264521465126452146512645214\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/karyawan/1/rekening",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Rekening",
					"item": [
						{
							"name": "delete rekening 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 200 status code', () => {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('success');",
											"    pm.expect(responseJson.messages[0]).to.equal('success delete rekening');",
											"    pm.expect(responseJson.payload).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "rekening - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('rekening not found');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening/11",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening",
										"11"
									]
								}
							},
							"response": []
						},
						{
							"name": "rekening - non numeric ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('it should response 400 status code', () => {",
											"    pm.expect(pm.response).to.have.status(400);",
											"});",
											"",
											"pm.test('response Content-Type header should have application/json value', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
											"}); ",
											"",
											"pm.test('response body should an object', () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('response body should have correct property and value', () => {",
											"    const responseJson = pm.response.json();",
											"    ",
											"    pm.expect(responseJson.status).to.equal('fail');",
											"    pm.expect(responseJson.messages[0]).to.equal('id rekening must be number');",
											"    pm.expect(responseJson.payload).to.be.an('null');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/karyawan/1/rekening/a",
									"host": [
										"{{url}}"
									],
									"path": [
										"karyawan",
										"1",
										"rekening",
										"a"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}